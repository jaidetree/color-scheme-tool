// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Color from "./Color.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Signals from "@preact/signals";

var stateSignal = Signals.signal({
      selectedColor: 0,
      colors: [
        "000000",
        "000000",
        "000000",
        "000000",
        "000000"
      ]
    });

function getSelectedColor() {
  var match = stateSignal.value;
  return Core__Option.getOr(match.colors[match.selectedColor], "000000");
}

function setSelectedColor(color) {
  var state = stateSignal.value;
  var updatedColors = state.colors.toSpliced(state.selectedColor, 1, color);
  stateSignal.value = {
    selectedColor: state.selectedColor,
    colors: updatedColors
  };
}

var colorsSignal = Signals.computed(function () {
      return stateSignal.value.colors;
    });

var colorDataSignal = Signals.computed(function () {
      var color = getSelectedColor();
      var rgb = Color.Hex.toRGB(color);
      var match = Color.RGB.toHSV(rgb);
      return {
              rgb: {
                r: rgb[0],
                g: rgb[1],
                b: rgb[2]
              },
              hsv: {
                h: match[0],
                s: match[1],
                v: match[2]
              }
            };
    });

function setRGB(input) {
  var match = colorDataSignal.value;
  var hsv = match.hsv;
  var v = hsv.v;
  var s = hsv.s;
  var h = hsv.h;
  var rgb = match.rgb;
  var b = rgb.b;
  var g = rgb.g;
  var r = rgb.r;
  var color;
  switch (input.TAG) {
    case "Hex" :
        color = {
          TAG: "Hex",
          _0: input._0
        };
        break;
    case "RGB" :
        color = {
          TAG: "RGB",
          _0: input._0,
          _1: input._1,
          _2: input._2
        };
        break;
    case "HSV" :
        color = {
          TAG: "HSV",
          _0: input._0,
          _1: input._1,
          _2: input._2
        };
        break;
    case "Red" :
        color = {
          TAG: "RGB",
          _0: input._0,
          _1: g,
          _2: b
        };
        break;
    case "Green" :
        color = {
          TAG: "RGB",
          _0: r,
          _1: input._0,
          _2: b
        };
        break;
    case "Blue" :
        color = {
          TAG: "RGB",
          _0: r,
          _1: g,
          _2: input._0
        };
        break;
    case "Hue" :
        color = {
          TAG: "HSV",
          _0: input._0,
          _1: s,
          _2: v
        };
        break;
    case "Saturation" :
        color = {
          TAG: "HSV",
          _0: h,
          _1: input._0,
          _2: v
        };
        break;
    case "Value" :
        color = {
          TAG: "HSV",
          _0: h,
          _1: s,
          _2: input._0
        };
        break;
    
  }
  var tmp;
  switch (color.TAG) {
    case "Hex" :
        tmp = color._0;
        break;
    case "RGB" :
        tmp = Color.RGB.toHex([
              color._0,
              color._1,
              color._2
            ], undefined);
        break;
    case "HSV" :
        tmp = Color.RGB.toHex(Color.HSV.toRGB([
                  color._0,
                  color._1,
                  color._2
                ]), undefined);
        break;
    
  }
  setSelectedColor(tmp);
}

function setBrightness(value) {
  var match = colorDataSignal.value;
  var hsv = match.hsv;
  var s = hsv.s;
  var h = hsv.h;
  console.log("setBrightness", h.toString() + ", " + s.toString() + ", " + value.toString());
  setRGB({
        TAG: "HSV",
        _0: h,
        _1: s,
        _2: value
      });
}

export {
  stateSignal ,
  getSelectedColor ,
  setSelectedColor ,
  colorsSignal ,
  colorDataSignal ,
  setRGB ,
  setBrightness ,
}
/* stateSignal Not a pure module */
