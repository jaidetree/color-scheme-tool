// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Color from "./Color.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Signals from "@preact/signals";

var stateSignal = Signals.signal({
      selectedColor: 0,
      colors: [
        {
          TAG: "HSV",
          _0: 360,
          _1: 100,
          _2: 100
        },
        {
          TAG: "HSV",
          _0: 0,
          _1: 0,
          _2: 0
        },
        {
          TAG: "HSV",
          _0: 0,
          _1: 0,
          _2: 0
        },
        {
          TAG: "HSV",
          _0: 0,
          _1: 0,
          _2: 0
        },
        {
          TAG: "HSV",
          _0: 0,
          _1: 0,
          _2: 0
        }
      ]
    });

function parseColorState(color) {
  switch (color.TAG) {
    case "Hex" :
        var hex = color._0;
        var rgb = Color.Hex.toRGB(hex);
        var match = Color.RGB.toHSV(rgb);
        return {
                rgb: {
                  r: rgb[0],
                  g: rgb[1],
                  b: rgb[2]
                },
                hsv: {
                  h: match[0],
                  s: match[1],
                  v: match[2]
                },
                hex: hex
              };
    case "RGB" :
        var b = color._2;
        var g = color._1;
        var r = color._0;
        var rgb$1 = [
          r,
          g,
          b
        ];
        var hex$1 = Color.RGB.toHex(rgb$1, undefined);
        var match$1 = Color.RGB.toHSV(rgb$1);
        return {
                rgb: {
                  r: r,
                  g: g,
                  b: b
                },
                hsv: {
                  h: match$1[0],
                  s: match$1[1],
                  v: match$1[2]
                },
                hex: hex$1
              };
    case "HSV" :
        var v = color._2;
        var s = color._1;
        var h = color._0;
        var hsv = [
          h,
          s,
          v
        ];
        var rgb$2 = Color.HSV.toRGB(hsv);
        var hex$2 = Color.RGB.toHex(rgb$2, undefined);
        return {
                rgb: {
                  r: rgb$2[0],
                  g: rgb$2[1],
                  b: rgb$2[2]
                },
                hsv: {
                  h: h,
                  s: s,
                  v: v
                },
                hex: hex$2
              };
    
  }
}

var colorsSignal = Signals.computed(function () {
      var match = stateSignal.value;
      return match.colors.map(parseColorState);
    });

var selectedColorSignal = Signals.computed(function () {
      var match = stateSignal.value;
      var colors = colorsSignal.value;
      return Core__Option.getOr(colors[match.selectedColor], {
                  rgb: {
                    r: 0,
                    g: 0,
                    b: 0
                  },
                  hsv: {
                    h: 0,
                    s: 0,
                    v: 0
                  },
                  hex: "000000"
                });
    });

function getSelectedColor() {
  return selectedColorSignal.value;
}

function peekSelectedColor() {
  return selectedColorSignal.peek();
}

function updateSelectedColor(color) {
  var state = stateSignal.peek();
  var updatedColors = state.colors.toSpliced(state.selectedColor, 1, color);
  stateSignal.value = {
    selectedColor: state.selectedColor,
    colors: updatedColors
  };
}

var color = selectedColorSignal.value;

var signal = Signals.signal({
      TAG: "InitHSV",
      _0: color
    });

var Actions = {
  updateSelectedColor: updateSelectedColor,
  signal: signal
};

function setSelectedColor(input) {
  var match = selectedColorSignal.peek();
  var hsv = match.hsv;
  var rgb = match.rgb;
  var tmp;
  switch (input.TAG) {
    case "R" :
        tmp = {
          TAG: "RGB",
          _0: input._0,
          _1: rgb.g,
          _2: rgb.b
        };
        break;
    case "G" :
        tmp = {
          TAG: "RGB",
          _0: rgb.r,
          _1: input._0,
          _2: rgb.b
        };
        break;
    case "B" :
        tmp = {
          TAG: "RGB",
          _0: rgb.r,
          _1: rgb.g,
          _2: input._0
        };
        break;
    case "H" :
        tmp = {
          TAG: "HSV",
          _0: input._0,
          _1: hsv.s,
          _2: hsv.v
        };
        break;
    case "S" :
        tmp = {
          TAG: "HSV",
          _0: hsv.h,
          _1: input._0,
          _2: hsv.v
        };
        break;
    case "V" :
        tmp = {
          TAG: "HSV",
          _0: hsv.h,
          _1: hsv.s,
          _2: input._0
        };
        break;
    case "Hex" :
        tmp = {
          TAG: "Hex",
          _0: input._0
        };
        break;
    case "HS" :
        tmp = {
          TAG: "HSV",
          _0: input._0,
          _1: input._1,
          _2: hsv.v
        };
        break;
    
  }
  updateSelectedColor(tmp);
  var color = selectedColorSignal.peek();
  var tmp$1;
  switch (input.TAG) {
    case "H" :
    case "S" :
    case "V" :
        tmp$1 = {
          TAG: "HSV",
          _0: color
        };
        break;
    case "Hex" :
        tmp$1 = {
          TAG: "Hex",
          _0: color
        };
        break;
    case "HS" :
        tmp$1 = {
          TAG: "Wheel",
          _0: color
        };
        break;
    default:
      tmp$1 = {
        TAG: "RGB",
        _0: color
      };
  }
  signal.value = tmp$1;
}

var canvasSignal = Signals.signal(undefined);

export {
  stateSignal ,
  parseColorState ,
  colorsSignal ,
  selectedColorSignal ,
  getSelectedColor ,
  peekSelectedColor ,
  Actions ,
  setSelectedColor ,
  canvasSignal ,
}
/* stateSignal Not a pure module */
