// Generated by ReScript, PLEASE EDIT WITH CARE

import * as State from "./State.res.mjs";
import * as Core__Float from "@rescript/core/src/Core__Float.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Hooks from "preact/hooks";
import * as Signals from "@preact/signals";
import * as JsxRuntime from "preact/jsx-runtime";

var dragFsmSignal = Signals.signal({
      prev: {
        state: "Init",
        effect: undefined
      },
      next: {
        state: "Init",
        effect: undefined
      }
    });

function dispatch(action) {
  var match = dragFsmSignal.value;
  var prev = match.next;
  var match$1 = prev.state;
  var next;
  var exit = 0;
  var e;
  if (typeof match$1 !== "object") {
    switch (action.TAG) {
      case "MouseDown" :
          e = action._0;
          exit = 1;
          break;
      case "MouseMove" :
      case "MouseUp" :
          next = prev;
          break;
      
    }
  } else if (match$1.TAG === "Idle") {
    switch (action.TAG) {
      case "MouseDown" :
          e = action._0;
          exit = 1;
          break;
      case "MouseMove" :
      case "MouseUp" :
          next = prev;
          break;
      
    }
  } else {
    switch (action.TAG) {
      case "MouseDown" :
          next = prev;
          break;
      case "MouseMove" :
          var e$1 = action._0;
          var x = e$1.pageX;
          var y = e$1.pageY;
          next = {
            state: {
              TAG: "Dragging",
              _0: x,
              _1: y
            },
            effect: prev.effect
          };
          break;
      case "MouseUp" :
          var e$2 = action._0;
          var x$1 = e$2.pageX;
          var y$1 = e$2.pageY;
          next = {
            state: {
              TAG: "Idle",
              _0: x$1,
              _1: y$1
            },
            effect: undefined
          };
          break;
      
    }
  }
  if (exit === 1) {
    var x$2 = e.pageX;
    var y$2 = e.pageY;
    var createListeners = function (dispatch) {
      var onMouseMove = function ($$event) {
        dispatch({
              TAG: "MouseMove",
              _0: $$event
            });
      };
      var onMouseUp = function ($$event) {
        dispatch({
              TAG: "MouseUp",
              _0: $$event
            });
      };
      window.addEventListener("mousemove", onMouseMove);
      window.addEventListener("mouseup", onMouseUp, {
            once: true
          });
      return (function () {
                window.removeEventListener("mousemove", onMouseMove);
                window.removeEventListener("mouseup", onMouseUp);
              });
    };
    next = {
      state: {
        TAG: "Dragging",
        _0: x$2,
        _1: y$2
      },
      effect: createListeners
    };
  }
  dragFsmSignal.value = {
    prev: prev,
    next: next
  };
}

var cleanupEffectRef = {
  contents: undefined
};

Signals.effect(function () {
      var match = dragFsmSignal.value;
      var prevCleanup = cleanupEffectRef.contents;
      var match$1 = match.prev.effect;
      var match$2 = match.next.effect;
      var cleanup = match$1 !== undefined ? (
          match$2 !== undefined ? (
              match$1 === match$2 ? prevCleanup : (Core__Option.forEach(prevCleanup, (function (cleanup) {
                          cleanup();
                        })), match$2(dispatch))
            ) : (Core__Option.forEach(prevCleanup, (function (cleanup) {
                      cleanup();
                    })), undefined)
        ) : (
          match$2 !== undefined ? match$2(dispatch) : undefined
        );
      cleanupEffectRef.contents = cleanup;
    });

function fromPos(pageX, pageY) {
  var element = document.getElementById("color-wheel");
  if (element == null) {
    return {
            angle: 0.0,
            x: 332.0,
            y: 332.0,
            hyp: 300.0
          };
  }
  var rect = element.getBoundingClientRect();
  var scrollX = window.scrollX;
  var scrollY = window.scrollY;
  var x = (pageX - rect.left | 0) - scrollX | 0;
  var y = (pageY - rect.top | 0) - scrollY | 0;
  var relativeX = x - 300.0;
  var relativeY = y - 300.0;
  var hyp = Math.hypot(relativeX, relativeY);
  var angle = Math.atan2(relativeY, relativeX) * 180.0 / Math.PI;
  var angle$1 = angle < 0.0 ? 360.0 + angle : angle;
  if (hyp <= 300.0) {
    return {
            angle: angle$1,
            x: x,
            y: y,
            hyp: hyp
          };
  }
  var w = relativeY * 300.0 / hyp;
  var z = relativeX * 300.0 / hyp;
  return {
          angle: angle$1,
          x: Math.round(z) + 300.0,
          y: Math.round(w) + 300.0,
          hyp: 300.0
        };
}

function toColor(param) {
  var h = 360.0 - param.angle | 0;
  var s = Core__Float.clamp(0.0, 300.0, param.hyp) / 300.0 * 100.0 | 0;
  return [
          h,
          s
        ];
}

function fromHS(h, s) {
  var theta = Math.PI * (h - 360.0) / 180.0;
  var hyp = s / 100.0 * 300.0;
  var x = hyp * Math.cos(theta);
  var y = hyp * Math.sin(theta);
  return {
          angle: h + 360.0,
          x: x,
          y: y,
          hyp: hyp
        };
}

function translateToWheel(param) {
  var hyp = param.hyp;
  var y = param.y;
  var x = param.x;
  var angle = param.angle;
  return Core__Option.map(State.canvasSignal.value, (function (canvas) {
                var rect = canvas.getBoundingClientRect();
                var offsetX = rect.width / 2.0;
                var offsetY = rect.height / 2.0;
                var x$1 = x + offsetX;
                var y$1 = offsetY - y;
                return {
                        angle: angle,
                        x: x$1,
                        y: y$1,
                        hyp: hyp
                      };
              }));
}

var Triangle = {
  fromPos: fromPos,
  toColor: toColor,
  fromHS: fromHS,
  translateToWheel: translateToWheel
};

var handleSignal = Signals.signal({
      x: 0,
      y: 0
    });

function moveCursor(param) {
  handleSignal.value = {
    x: (param.x | 0) + 32 | 0,
    y: (param.y | 0) + 32 | 0
  };
}

Signals.effect(function () {
      var match = dragFsmSignal.value;
      var state = match.next.state;
      var exit = 0;
      if (typeof state === "object") {
        exit = 1;
      }
      if (exit === 1) {
        var triangle = fromPos(state._0, state._1);
        moveCursor(triangle);
        var match$1 = toColor(triangle);
        State.setSelectedColor({
              TAG: "HS",
              _0: match$1[0],
              _1: match$1[1]
            });
      }
      
    });

Signals.effect(function () {
      var action = State.Actions.signal.value;
      if (action.TAG !== "Wheel") {
        var hsv = action._0.hsv;
        Core__Option.forEach(translateToWheel(fromHS(hsv.h, hsv.s)), moveCursor);
      }
      
    });

function ColorHandles(props) {
  var onMouseDown = Hooks.useCallback((function (e) {
          dispatch({
                TAG: "MouseDown",
                _0: e
              });
        }), []);
  var match = handleSignal.value;
  var y = match.y;
  var x = match.x;
  var match$1 = State.getSelectedColor();
  var rgb = match$1.rgb;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("button", {
                      className: "handle absolute bg-black border border-black size-5 rounded-full transform translate-x-[-10px] translate-y-[-10px] z-40",
                      style: {
                        backgroundColor: "rgb(" + rgb.r.toString() + ", " + rgb.g.toString() + ", " + rgb.b.toString() + ")",
                        left: x.toString() + "px",
                        top: y.toString() + "px"
                      },
                      type: "button",
                      onMouseDown: onMouseDown
                    }),
                JsxRuntime.jsx("div", {
                      children: JsxRuntime.jsx("svg", {
                            children: JsxRuntime.jsx("line", {
                                  style: {
                                    strokeLinecap: "round",
                                    strokeWidth: "2"
                                  },
                                  stroke: "rgba(0, 0, 0, 0.5)",
                                  x1: "300",
                                  x2: (x - 32 | 0).toString(),
                                  y1: "300",
                                  y2: (y - 32 | 0).toString()
                                }),
                            height: "600",
                            width: "600",
                            viewBox: "0 0 600 600"
                          }),
                      className: "handle-bars absolute left-0 top-0 right-0 bottom-0 p-8 z-30"
                    }),
                props.children
              ],
              className: "handles-ui relative p-8"
            });
}

var make = ColorHandles;

export {
  dragFsmSignal ,
  dispatch ,
  cleanupEffectRef ,
  Triangle ,
  handleSignal ,
  moveCursor ,
  make ,
}
/* dragFsmSignal Not a pure module */
