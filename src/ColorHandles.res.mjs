// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Color from "./Color.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Float from "@rescript/core/src/Core__Float.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Signals from "@preact/signals";
import * as JsxRuntime from "preact/jsx-runtime";

console.log("Hex", "#6af2ff");

console.log("Hex.toRgb", Color.Hex.toRgb("#6af2ff"));

console.log("RGB.toHex", Color.RGB.toHex(Color.Hex.toRgb("#6af2ff")));

console.log("RGB.toHsl", Color.RGB.toHsl(Color.Hex.toRgb("#6af2ff")));

console.log("Hex->rgb->hsl->rgb", Color.HSL.toRgb(Color.RGB.toHsl(Color.Hex.toRgb("#6af2ff"))));

console.log("Hex->rgb->hsl->rgb->hex", Color.RGB.toHex(Color.HSL.toRgb(Color.RGB.toHsl(Color.Hex.toRgb("#6af2ff")))));

var handleSignal = Signals.signal({
      x: 300,
      y: 300
    });

function ColorHandles(props) {
  var onClick = function (e) {
    var container = e.currentTarget;
    var element = Core__Option.getExn(Caml_option.nullable_to_opt(container.querySelector("canvas")), "Canvas element not found");
    var rect = element.getBoundingClientRect();
    var scrollX = window.scrollX;
    var scrollY = window.scrollY;
    var pageX = e.pageX;
    var pageY = e.pageY;
    var x = (pageX - rect.left | 0) - scrollX | 0;
    var y = (pageY - rect.top | 0) - scrollY | 0;
    var relativeX = x - 300.0;
    var relativeY = y - 300.0;
    var hyp = Math.hypot(relativeX, relativeY);
    var coords;
    if (hyp > 300.0) {
      var w = relativeY * 300.0 / hyp;
      var z = relativeX * 300.0 / hyp;
      coords = {
        x: (Math.round(z) | 0) + 300 | 0,
        y: (Math.round(w) | 0) + 300 | 0
      };
    } else {
      coords = {
        x: x,
        y: y
      };
    }
    handleSignal.value = {
      x: coords.x + 32 | 0,
      y: coords.y + 32 | 0
    };
    var angle = Math.atan2(relativeY, relativeX) * 180.0 / Math.PI;
    var angle$1 = angle < 0.0 ? 360.0 + Math.abs(angle) : angle;
    console.log({
          x: relativeX,
          y: relativeY,
          hyp: hyp,
          saturation: Core__Float.clamp(0.0, 300.0, hyp) / 300.0 * 100.0,
          hue: angle$1
        });
  };
  var match = handleSignal.value;
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      className: "handle absolute bg-black/50 border border-white/70 size-5 rounded-full transform translate-x-[-10px] translate-y-[-10px] z-40",
                      style: {
                        left: match.x.toString() + "px",
                        top: match.y.toString() + "px"
                      }
                    }),
                props.children
              ],
              className: "handles-ui relative p-8",
              onClick: onClick
            });
}

var make = ColorHandles;

export {
  handleSignal ,
  make ,
}
/*  Not a pure module */
