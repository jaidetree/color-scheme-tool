// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function between(h$p, min, max) {
  if (min <= h$p) {
    return h$p < max;
  } else {
    return false;
  }
}

function hueToRgb(h$p, c, x) {
  if (between(h$p, 0, 1)) {
    return [
            c,
            x,
            0.0
          ];
  } else if (between(h$p, 1, 2)) {
    return [
            x,
            c,
            0.0
          ];
  } else if (between(h$p, 2, 3)) {
    return [
            0.0,
            c,
            x
          ];
  } else if (between(h$p, 3, 4)) {
    return [
            0.0,
            x,
            c
          ];
  } else if (between(h$p, 4, 5)) {
    return [
            x,
            0.0,
            c
          ];
  } else {
    return [
            c,
            0.0,
            x
          ];
  }
}

function toRgb(param) {
  var s = param[1] / 100.0;
  var l = param[2] / 100.0;
  var c = (1.0 - Math.abs(2.0 * l - 1.0)) * s;
  var h$p = param[0] / 60.0;
  var x = c * (1.0 - Math.abs(h$p % 2.0 - 1.0));
  var m = l - c / 2.0;
  var match = hueToRgb(h$p, c, x);
  var normalize = function (v) {
    return Math.round((v + m) * 255.0) | 0;
  };
  return [
          normalize(match[0]),
          normalize(match[1]),
          normalize(match[2])
        ];
}

var HSL = {
  between: between,
  hueToRgb: hueToRgb,
  toRgb: toRgb
};

function toHex(param) {
  var hexStr = (16777216 | (param[0] << 16) | (param[1] << 8) | param[2]).toString(16).slice(1);
  return "#" + hexStr;
}

function toHsl(param) {
  var r = param[0] / 255.0;
  var g = param[1] / 255.0;
  var b = param[2] / 255.0;
  var floats = [
    r,
    g,
    b
  ];
  var max = Caml_splice_call.spliceApply(Math.max, [floats]);
  var min = Caml_splice_call.spliceApply(Math.min, [floats]);
  var delta = max - min;
  var lightness = (max + min) / 2.0;
  var saturation = max === min ? 0.0 : (
      lightness > 0.5 ? delta / (2.0 - max - min) : delta / (max + min)
    );
  var hue$p = max === min ? 0.0 : (
      max === r ? (g - b) / delta % 6.0 : (
          max === g ? (b - r) / delta + 2.0 : (r - g) / delta + 4.0
        )
    );
  var hue = Math.round(hue$p * 60.0) | 0;
  var hue$1 = hue < 0 ? hue + 360 | 0 : hue;
  var saturation$1 = Math.round(saturation * 100.0) | 0;
  var lightness$1 = Math.round(lightness * 100.0) | 0;
  return [
          hue$1,
          saturation$1,
          lightness$1
        ];
}

var RGB = {
  toHex: toHex,
  toHsl: toHsl
};

function toRgb$1(fullHexStr) {
  var hexStr = fullHexStr.replace("#", "");
  var $$int = Core__Option.getOr(Core__Int.fromString(hexStr, 16), 0);
  var r = ($$int >> 16) & 255;
  var g = ($$int >> 8) & 255;
  var b = $$int & 255;
  return [
          r,
          g,
          b
        ];
}

var Hex = {
  toRgb: toRgb$1
};

export {
  HSL ,
  RGB ,
  Hex ,
}
/* No side effect */
