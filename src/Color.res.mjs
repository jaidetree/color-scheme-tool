// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function toRGB(param) {
  var h = param[0];
  var s$p = param[1] / 100.0;
  var v$p = param[2] / 100.0;
  var c = v$p * s$p;
  var x = c * (1.0 - Math.abs(h / 60.0 % 2.0 - 1.0));
  var m = v$p - c;
  var match = 0 <= h && h < 60 ? [
      c,
      x,
      0.0
    ] : (
      h <= 120 ? [
          x,
          c,
          0.0
        ] : (
          h <= 180 ? [
              0.0,
              c,
              x
            ] : (
              h <= 240 ? [
                  0.0,
                  x,
                  c
                ] : (
                  h <= 300 ? [
                      x,
                      0.0,
                      c
                    ] : (
                      h <= 360 ? [
                          c,
                          0.0,
                          x
                        ] : [
                          0.0,
                          0.0,
                          0.0
                        ]
                    )
                )
            )
        )
    );
  var r = Math.round((match[0] + m) * 255.0) | 0;
  var g = Math.round((match[1] + m) * 255.0) | 0;
  var b = Math.round((match[2] + m) * 255.0) | 0;
  return [
          r,
          g,
          b
        ];
}

function toHSL(param) {
  var v = param[2] / 100.0;
  var sv = param[1] / 100.0;
  var l = v * (1.0 - sv / 2.0);
  var s = l === 0.0 || l === 1.0 ? 0.0 : (v - l) / Math.min(l, 1.0 - l);
  var s$1 = Math.round(s * 100.0) | 0;
  var l$1 = Math.round(l * 100.0) | 0;
  return [
          param[0],
          s$1,
          l$1
        ];
}

var HSV = {
  toRGB: toRGB,
  toHSL: toHSL
};

function toRGB$1(param) {
  var h = param[0];
  var s = param[1] / 100.0;
  var l = param[2] / 100.0;
  var c = (1.0 - Math.abs(2.0 * l - 1.0)) * s;
  var x = c * (1.0 - Math.abs(h / 60.0 % 2.0 - 1.0));
  var m = l - c / 2.0;
  var match = 0 <= h && h < 60 ? [
      c,
      x,
      0.0
    ] : (
      h <= 120 ? [
          x,
          c,
          0.0
        ] : (
          h <= 180 ? [
              0.0,
              c,
              x
            ] : (
              h <= 240 ? [
                  0.0,
                  x,
                  c
                ] : (
                  h <= 300 ? [
                      x,
                      0.0,
                      c
                    ] : (
                      h <= 360 ? [
                          c,
                          0.0,
                          x
                        ] : [
                          0.0,
                          0.0,
                          0.0
                        ]
                    )
                )
            )
        )
    );
  var r = Math.round((match[0] + m) * 255.0) | 0;
  var g = Math.round((match[1] + m) * 255.0) | 0;
  var b = Math.round((match[2] + m) * 255.0) | 0;
  return [
          r,
          g,
          b
        ];
}

function toHSV(param) {
  var sl = param[1] / 100.0;
  var l = param[2] / 100.0;
  var v = l + sl * Math.min(l, 1.0 - l);
  var s = v === 0.0 ? 0.0 : 2.0 * (1.0 - l / v);
  var s$1 = Math.round(s * 100.0) | 0;
  var v$1 = Math.round(v * 100.0) | 0;
  return [
          param[0],
          s$1,
          v$1
        ];
}

var HSL = {
  toRGB: toRGB$1,
  toHSV: toHSV
};

function toHex(param, $staropt$star) {
  var prefix = $staropt$star !== undefined ? $staropt$star : false;
  var prefix$1 = prefix ? "#" : "";
  var hexStr = (16777216 | (param[0] << 16) | (param[1] << 8) | param[2]).toString(16).slice(1);
  return prefix$1 + hexStr;
}

function toHSL$1(param) {
  var r$p = param[0] / 255.0;
  var g$p = param[1] / 255.0;
  var b$p = param[2] / 255.0;
  var cmax = Math.max(r$p, g$p, b$p);
  var cmin = Math.min(r$p, g$p, b$p);
  var delta = cmax - cmin;
  var h = Math.round(cmax === r$p ? (g$p - b$p) / delta % 6.0 * 60.0 : (
          cmax === g$p ? ((b$p - r$p) / delta + 2.0) * 60.0 : (
              cmax === b$p ? ((r$p - g$p) / delta + 4.0) * 60.0 : 0.0
            )
        )) | 0;
  var l = (cmax + cmin) / 2.0;
  var s = Math.round((
        delta !== 0.0 ? delta / (1.0 - Math.abs(2.0 * l - 1.0)) : 0.0
      ) * 100.0) | 0;
  var l$1 = Math.round(l * 100.0) | 0;
  return [
          h,
          s,
          l$1
        ];
}

function toHSV$1(param) {
  var r$p = param[0] / 255.0;
  var g$p = param[1] / 255.0;
  var b$p = param[2] / 255.0;
  var cmax = Math.max(r$p, g$p, b$p);
  var cmin = Math.min(r$p, g$p, b$p);
  var delta = cmax - cmin;
  var h = Math.round(cmax === r$p ? (g$p - b$p) / delta % 6.0 * 60.0 : (
          cmax === g$p ? ((b$p - r$p) / delta + 2.0) * 60.0 : (
              cmax === b$p ? ((r$p - g$p) / delta + 4.0) * 60.0 : 0.0
            )
        )) | 0;
  var s = Math.round(cmax === 0.0 ? 0.0 : delta / cmax * 100.0) | 0;
  var v = Math.round(cmax * 100.0) | 0;
  return [
          h,
          s,
          v
        ];
}

function toRGB$2(fullHexStr) {
  var hexStr = fullHexStr.replace("#", "");
  var $$int = Core__Option.getOr(Core__Int.fromString(hexStr, 16), 0);
  var r = ($$int >> 16) & 255;
  var g = ($$int >> 8) & 255;
  var b = $$int & 255;
  return [
          r,
          g,
          b
        ];
}

var Hex = {
  toRGB: toRGB$2
};

var RGB = {
  toHSV: toHSV$1,
  toHSL: toHSL$1,
  toHex: toHex
};

export {
  RGB ,
  HSV ,
  HSL ,
  Hex ,
}
/* No side effect */
